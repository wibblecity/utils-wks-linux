#!/bin/bash

function usage {
  ERROR_LOG_EVENT="$1"
  USAGE_INFO="$2"
  THIS_PID="$$"
  EXIT_STATUS="1"
  log_error_line
  log_error "##### ***** ERROR ***** ######"
  log_error "Message: ${ERROR_LOG_EVENT}"
  log_error "CMD: ${SCRIPT_PATH} ${THIS_ARGS}"
  if [ ! -z "${USAGE_INFO}" ] ; then
    log_error "Usage: ${SCRIPT_NAME} ${USAGE_INFO}"
  fi
  log_error "##### ***** ERROR ***** ######"
  log_error "##### Sleeping for 5 seconds then exiting with status: ${EXIT_STATUS}"
  log_error_line
  sleep 5
  exit "${EXIT_STATUS}"
}

function log_error {
  EVENT_DATA="$1"
  THIS_PID="$$"
  LOG_TIMESTAMP=`date "+%F %H:%M:%S %z"`
  echo "${LOG_TIMESTAMP} - ${THIS_PID} - ${SCRIPT_NAME} - ERROR: ${EVENT_DATA}" >&2
}

function log_error_line {
  EVENT_DATA="$1"
  echo "${EVENT_DATA}" >&2
}

function log_event {
  if [ "${WCI_ENABLE_LOGGING}" == "TRUE" ] ; then
    EVENT_DATA="$1"
    THIS_PID="$$"
    if [ -z "${THIS_PID}" ] ; then
      usage "THIS_PID variable is empty"
    fi
    LOG_TIMESTAMP=`date "+%F %H:%M:%S %z"`
    echo "${LOG_TIMESTAMP} - ${THIS_PID} - ${SCRIPT_NAME} - ${EVENT_DATA}"
  fi
}

function log_line {
  if [ "${WCI_ENABLE_LOGGING}" == "TRUE" ] ; then
    EVENT_DATA="$1"
    echo "${EVENT_DATA}"
  fi
}

function log_pipe {
  while read LINE ; do
    if [ "${WCI_ENABLE_LOGGING}" == "TRUE" ] ; then
      echo "${LINE}"
    fi
  done < "/dev/stdin"
}

function set_execution_environment_variables {
  ### understanding location
  EXECUTED_LOCATION="$0"
  if [ "${EXECUTED_LOCATION}" == "-bash" ] || [ "${EXECUTED_LOCATION}" == "" ] ; then
    SKIPPED='TRUE'
  else
    ### getting START_DIR
    START_DIR="$(pwd)"
    if [ "$?" != "0" ] ; then
      usage "START_DIR pwd command exited with errors"
    fi
    if [ -z "${START_DIR}" ] ; then
      usage "START_DIR variable is empty"
    fi
    #####
    ### getting SCRIPT_PATH
    if [ -z "${EXECUTED_LOCATION}" ] ; then
      usage "EXECUTED_LOCATION variable is empty"
    fi
    SCRIPT_PATH="$(realpath "${EXECUTED_LOCATION}")"
    if [ "$?" != "0" ] ; then
      usage "SCRIPT_PATH realpath command exited with errors"
    fi
    if [ -z "${SCRIPT_PATH}" ] ; then
      usage "SCRIPT_PATH variable is empty"
    fi
    #####
    ### getting SCRIPT_NAME
    SCRIPT_NAME="$(basename "${SCRIPT_PATH}")"
    if [ "$?" != "0" ] ; then
      usage "SCRIPT_NAME basename command exited with an error"
    fi
    if [ -z "${SCRIPT_NAME}" ] ; then
      usage "SCRIPT_NAME variable is empty"
    fi
    if [ -z "${SCRIPT_NAME}" ] ; then
      usage "SCRIPT_NAME variable is empty"
    fi
    #####
    ### getting SCRIPT_DIR
    SCRIPT_DIR="$(dirname "${SCRIPT_PATH}")"
    if [ "$?" != "0" ] ; then
      usage "SCRIPT_PATH dirname command exited with an error"
    fi
    if [ -z "${SCRIPT_DIR}" ] ; then
      usage "SCRIPT_DIR variable is empty"
    fi
    #####
    ### getting parent directories
    if [ "${SCRIPT_DIR}" != "/" ] ; then
      SCRIPT_DIR_PARENT_1="$(dirname "${SCRIPT_DIR}")"
      if [ "$?" != "0" ] ; then
        usage "SCRIPT_DIR_PARENT_1 dirname command exited with an error"
      fi
      if [ -z "${SCRIPT_DIR_PARENT_1}" ] ; then
        usage "SCRIPT_DIR_PARENT_1 variable is empty"
      fi
    fi
    if [ "${SCRIPT_DIR_PARENT_1}" != "/" ] ; then
      SCRIPT_DIR_PARENT_2="$(dirname "${SCRIPT_DIR_PARENT_1}")"
      if [ "$?" != "0" ] ; then
        usage "SCRIPT_DIR_PARENT_2 dirname command exited with an error"
      fi
      if [ -z "${SCRIPT_DIR_PARENT_2}" ] ; then
        usage "SCRIPT_DIR_PARENT_2 variable is empty"
      fi
    fi
    if [ "${SCRIPT_DIR_PARENT_2}" != "/" ] ; then
      SCRIPT_DIR_PARENT_3="$(dirname "${SCRIPT_DIR_PARENT_2}")"
      if [ "$?" != "0" ] ; then
        usage "SCRIPT_DIR_PARENT_3 dirname command exited with an error"
      fi
      if [ -z "${SCRIPT_DIR_PARENT_3}" ] ; then
        usage "SCRIPT_DIR_PARENT_3 variable is empty"
      fi
    fi
    #####
    ### getting THIS_PID
    THIS_PID="$$"
    if [ -z "${THIS_PID}" ] ; then
      usage "THIS_PID variable is empty"
    fi
    #####
    ### printing shell location variables
    log_line
    log_line "${THIS_PID} - Execution Environment:"
    log_line "${THIS_PID} -  Launch:"
    log_line "${THIS_PID} -   CMD: ${EXECUTED_LOCATION} ${THIS_ARGS}"
    log_line "${THIS_PID} -   START_DIR: ${START_DIR}"
    log_line "${THIS_PID} -   ARGS: ${THIS_ARGS}"
    log_line "${THIS_PID} -  Script:"
    log_line "${THIS_PID} -   SCRIPT_NAME: ${SCRIPT_NAME}"
    log_line "${THIS_PID} -   SCRIPT_PATH: ${SCRIPT_PATH}"
    log_line "${THIS_PID} -  Path:"
    log_line "${THIS_PID} -   SCRIPT_DIR: ${SCRIPT_DIR}"
    if [ ! -z "${SCRIPT_DIR_PARENT_1}" ] ; then
      log_line "${THIS_PID} -   SCRIPT_DIR_PARENT_1: ${SCRIPT_DIR_PARENT_1}"
    fi
    if [ ! -z "${SCRIPT_DIR_PARENT_2}" ] ; then
      log_line "${THIS_PID} -   SCRIPT_DIR_PARENT_2: ${SCRIPT_DIR_PARENT_2}"
    fi
    if [ ! -z "${SCRIPT_DIR_PARENT_3}" ] ; then
      log_line "${THIS_PID} -   SCRIPT_DIR_PARENT_3: ${SCRIPT_DIR_PARENT_3}"
    fi
    log_line
    #####
  fi
}

### import of ni profile - customised for setup
THIS_ARGS="$@"
set_execution_environment_variables
WCI_CFG_BASE=~/.wci
APP_PATH="${SCRIPT_DIR_PARENT_1}"
APP_NAME="$(basename "${APP_PATH}")"
if [ ! -d "${APP_PATH}" ] ; then
  usage "APP_PATH: ${APP_PATH} does not exist or is not a directory"
fi
mkdir -p "${WCI_CFG_BASE}"
echo "${APP_PATH}" > "${WCI_CFG_BASE}/wks_utils.path"

NI_PROFILE="${SCRIPT_DIR}/bash_profile-ni.bash"
if [ -f "${NI_PROFILE}" ] ; then
  . "${NI_PROFILE}"
else
  exit 1
fi
set_execution_environment_variables
#####

### variables
BIN_PATH_BASE=~/Bin
WCI_BASH_PROFILE_D_PATH=~/.bash_profile.wci.d
LOCAL_BASH_PROFILE=~/.bash_profile

NI_PROFILE_D_PATH=~/.bash_profile-ni.wci.d
NI_PROFILE_FILE=~/.bash_profile-ni
#####

### finding binaries
RUBY_BIN="$(which ruby)"
if [ "$?" -ne "0" ] ; then
  usage "cannot locate ruby"
fi

PYTHON_BIN="$(which python)"
if [ "$?" -ne "0" ] ; then
  usage "cannot locate python"
fi
#####

log_event
log_event "Installation started"
log_event
log_event " APP_NAME: ${APP_NAME}"
log_event " APP_PATH: ${APP_PATH}"
log_event " WCI_CFG_BASE: ${WCI_CFG_BASE}"
log_event " RUBY_BIN: ${RUBY_BIN}"
log_event " PYTHON_BIN: ${PYTHON_BIN}"
log_event

log_event "Configuring ${APP_NAME}"
set_permissions_on_dir "${APP_PATH}" '700'
set_permissions_on_dir "${WCI_CFG_BASE}" '700'
log_event

### including setup components
for PROFILE_FILE in `ls -1 "${SCRIPT_DIR}/setup.d/" | grep .bash` ; do
  . "${SCRIPT_DIR}/setup.d/${PROFILE_FILE}"
done

log_event
log_event "Installation complete"
log_event
